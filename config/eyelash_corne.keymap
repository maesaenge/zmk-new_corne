#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 90    // 10

// ───────────────────────────────
// Hold-Tap + Tap-Dance 매크로 정의
// ───────────────────────────────

#define HT_TD_KEYS(name, term_ms, flavor, tap1, tap2, hold) \
    td_##name: behavior_td_##name { \
        compatible = "zmk,behavior-tap-dance"; \
        label = "TD_" #name; \
        #binding-cells = <0>; \
        tapping-term-ms = <term_ms>; \
        bindings = tap1, tap2; \
    }; \
    ht_##name: behavior_ht_##name { \
        compatible = "zmk,behavior-hold-tap"; \
        label = "HT_" #name; \
        #binding-cells = <0>; \
        flavor = flavor; /* <- 수정된 부분: '#'를 제거하여 식별자로 처리 */ \
        tapping-term-ms = <term_ms>; \
        bindings = <&td_##name>, hold; \
    };

#define TD_KEYS(name, term_ms, ...) \
    name: behavior_##name { \
        compatible = "zmk,behavior-tap-dance"; \
        label = #name; \
        #binding-cells = <0>; \
        tapping-term-ms = <term_ms>; \
        bindings = __VA_ARGS__; \
    };
#define HT_KEYS(name, term_ms, flavor, tap_binding, hold_binding) \
    name: behavior_##name { \
        compatible = "zmk,behavior-hold-tap"; \
        label = #name; \
        #binding-cells = <0>; \
        flavor = #flavor; \
        tapping-term-ms = <term_ms>; \
        bindings = tap_binding, hold_binding; \
    };

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 4 1>; };

&msc {
    acceleration-exponent = <3>;
    time-to-max-speed-ms = <300>;
    delay-ms = <0>;
};

&mmv {
    time-to-max-speed-ms = <250>;
    acceleration-exponent = <1>;
    trigger-period-ms = <10>;
    delay-ms = <0>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    macros {
        // 된소리 매크로

        macro_pp: macro_pp {
            compatible = "zmk,behavior-macro";
            label = "MACRO_PP";
            #binding-cells = <0>;
            bindings = <&kp LS(Q)>;
        };

        macro_jj: macro_jj {
            compatible = "zmk,behavior-macro";
            label = "MACRO_JJ";
            #binding-cells = <0>;
            bindings = <&kp LS(W)>;
        };

        macro_tt: macro_tt {
            compatible = "zmk,behavior-macro";
            label = "MACRO_TT";
            #binding-cells = <0>;
            bindings = <&kp LS(E)>;
        };

        macro_kk: macro_kk {
            compatible = "zmk,behavior-macro";
            label = "MACRO_KK";
            #binding-cells = <0>;
            bindings = <&kp LS(R)>;
        };

        macro_ss: macro_ss {
            compatible = "zmk,behavior-macro";
            label = "MACRO_SS";
            #binding-cells = <0>;
            bindings = <&kp LS(T)>;
        };

        macro_yae: macro_yae {
            compatible = "zmk,behavior-macro";
            label = "MACRO_YAE";
            #binding-cells = <0>;
            bindings = <&kp LS(O)>;
        };

        macro_ye: macro_ye {
            compatible = "zmk,behavior-macro";
            label = "MACRO_YE";
            #binding-cells = <0>;
            bindings = <&kp LS(P)>;
        };

        macro_enter: macro_enter {
            compatible = "zmk,behavior-macro";
            label = "MACRO_ENTER";
            #binding-cells = <0>;
            bindings = <&kp ENTER>;
        };

        macro_double_click: macro_double_click {
            compatible = "zmk,behavior-macro";
            label = "MACRO_DOUBLE_CLICK";
            #binding-cells = <0>;
            bindings = <&mkp MB1 &mkp MB1>;
        };
    };

    behaviors {
        TD_KEYS(td_down_up, 450, <&kp PG_DN>, <&kp PG_UP>, <&kp HOME>, <&kp END>)
        TD_KEYS(td_mb_src, 450, <&mkp MB1>, <&mkp MB2>, <&msc SCRL_DOWN>, <&msc SCRL_UP>)
        TD_KEYS(td_bracket, 250, <&kp LBKT>, <&kp RBKT>)
        TD_KEYS(td_brace, 250, <&kp LBRC>, <&kp RBRC>)
        TD_KEYS(td_paren, 250, <&kp LPAR>, <&kp RPAR>)
        TD_KEYS(td_grave_, 250, <&kp GRAVE>, <&kp TILDE>)
        TD_KEYS(td_1, 250, <&kp N1>, <&kp EXCL>,  <&kp F1>)
        TD_KEYS(td_2, 250, <&kp N2>, <&kp AT>,    <&kp F2>)
        TD_KEYS(td_3, 250, <&kp N3>, <&kp HASH>,  <&kp F3>)
        TD_KEYS(td_4, 250, <&kp N4>, <&kp DLLR>,  <&kp F4>)
        TD_KEYS(td_5, 250, <&kp N5>, <&kp PRCNT>, <&kp F5>)
        TD_KEYS(td_6, 250, <&kp N6>, <&kp CARET>, <&kp F6>)
        TD_KEYS(td_7, 250, <&kp N7>, <&kp AMPS>,  <&kp F7>)
        TD_KEYS(td_8, 250, <&kp N8>, <&kp ASTRK>, <&kp F8>)
        TD_KEYS(td_9, 250, <&kp N9>, <&kp LPAR>,  <&kp F9>)
        TD_KEYS(td_0, 250, <&kp N0>, <&kp RPAR>,  <&kp F10>)
        TD_KEYS(td_slash_question, 250, <&kp FSLH>, <&kp LS(FSLH)>)
        TD_KEYS(td_f11_minus, 250, <&kp MINUS>, <&kp UNDER>, <&kp F11>)
        TD_KEYS(td_f12_equal, 250, <&kp EQUAL>, <&kp PLUS>, <&kp F12>)

        TD_KEYS(td_ae_yae, 250, <&kp O>, <&macro_yae>)
        TD_KEYS(td_e_ye,   250, <&kp P>, <&macro_ye>)

        TD_KEYS(td_p_pp,   250, <&kp Q>, <&macro_pp>)
        TD_KEYS(td_j_jj,   250, <&kp W>, <&macro_jj>)
        TD_KEYS(td_t_tt,   250, <&kp E>, <&macro_tt>)
        TD_KEYS(td_k_kk,   250, <&kp R>, <&macro_kk>)
        TD_KEYS(td_s_ss,   250, <&kp T>, <&macro_ss>)

        TD_KEYS(td_toggle_layer_3, 400, <&none>, <&tog 2>)

        TD_KEYS(td_enter_layer2, 250, <&macro_enter>, <&tog 2>)

        HT_TD_KEYS(a_A_sel, 200, tap-preferred, <&kp A>, <&kp LS(A)>, <&kp LCTRL &kp A>)

        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            label = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        ht_mo1_ltog3: ht_mo1_ltog3 {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MO1_LTOG3";
            bindings = <&mo>, <&td_toggle_layer_3>;

            #binding-cells = <2>;
            tapping-term-ms = <380>;
        };

        ht_enter_ltog3: ht_enter_ltog3 {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_ENTER_LTOG3";
            bindings = <&td_toggle_layer_3 &macro_enter>; // 이전 단계에서 만든 매크로 사용
            #binding-cells = <2>; // ZMK의 규칙에 따라 반드시 2로 설정해야 합니다.
            tapping-term-ms = <380>;
        };

        alt_gui: alt_gui {
            compatible = "zmk,behavior-tap-dance";
            label = "ALT_GUI";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT>, <&kp LEFT_GUI>;

            tapping-term-ms = <400>;
        };

        UC_BS: UC_BS {
            compatible = "zmk,behavior-tap-dance";
            label = "UC_BS";
            #binding-cells = <0>;
            bindings = <&kp UNDERSCORE>, <&kp BACKSLASH>;

            tapping-term-ms = <330>;
        };

        td_grave: td_grave {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp TILDE>;

            tapping-term-ms = <350>;
        };

        dotcom_bh: dotcom_bh {
            compatible = "zmk,behavior-tap-dance";
            label = "DOTCOM_BH";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COMMA>;
        };

        ht_bh: ht_bh {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BH";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ht_bh_mmv: ht_bh_mmv {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BH_MMV";
            bindings = <&mmv>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };

        ht_bh_mkp: ht_bh_mkp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BH_MKP";
            bindings = <&mkp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ht_bh_msc: ht_bh_msc {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BH_MSC";
            bindings = <&msc>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        softoff {
            bindings = <&soft_off>;
            key-positions = <1 15 29>;
        };

        combo_x {
            timeout-ms = <80>;
            bindings = <&kp LC(X)>;
            key-positions = <29 30>;
            layers = <0>;
        };

        combo_c {
            timeout-ms = <80>;
            bindings = <&kp LC(C)>;
            key-positions = <30 31>;
            layers = <0>;
        };

        combo_paste {
            timeout-ms = <80>;
            bindings = <&kp LC(V)>;
            key-positions = <31 32>;
            layers = <0>;
        };

        enter_fg {
            bindings = <&kp SPACE>;
            key-positions = <17 18>;
        };

        enter_hj {
            bindings = <&kp ENTER>;
            key-positions = <22 23>;
            layers = <0>;
        };

        alt_hk {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <22 24>;
            layers = <0>;
        };

        combo_esc: combo_esc {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp ESC>;
            layers = <0>;
        };

        gh_han {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <22 8>;
            layers = <0>;
        };

        op_alt_f4 {
            bindings = <&kp LA(F4)>;
            key-positions = <10 11 12>;
            layers = <0>;
        };

        sd_shift_del {
            bindings = <&kp LS(DELETE)>;
            key-positions = <15 16>;
            layers = <0>;
        };

        combo_double_click: combo_double_click {
            bindings = <&macro_double_click>;
            key-positions = <7 8>;
            layers = <2 4>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
            layers = <1>;
        };

        dfg_mouse {
            bindings = <&tog 5>;
            key-positions = <16 17 18>;
        };

        hjk_mouse {
            bindings = <&tog 4>;
            key-positions = <22 23 24>;
        };

        esc_asd {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            layers = <0>;
        };

        ctrl_back {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <45 7>;
            layers = <0>;
        };

        jb_alt {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <45 23>;
            layers = <0>;
        };

        hb_alt {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <22 45>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB    &td_p_pp        &td_j_jj           &td_t_tt             &td_k_kk              &td_s_ss                                       &kp UP                &ht_bh_mkp LCLK Y       &ht_bh_mmv MOVE_UP U    &ht_bh LC(RIGHT_ALT) I   &td_ae_yae                 &td_e_ye                        &UC_BS
&td0       &ht_bh LCTRL A  &ht_bh LEFT_ALT S  &ht_bh LEFT_SHIFT D  &ht_bh_msc SCRL_UP F  &ht_bh_msc SCRL_DOWN G               &kp LEFT  &kp ENTER  &kp RIGHT  &ht_bh_mmv MOVE_LEFT H  &ht_bh_mmv MOVE_DOWN J  &ht_bh_mmv MOVE_RIGHT K  &ht_bh ENTER L             &ht_bh LC(BACKSPACE) SEMICOLON  &kp SQT
&kp LCTRL  &ht_bh HOME Z   &ht_bh END X       &ht_bh PG_UP C       &ht_bh PAGE_DOWN V    &ht_bh RIGHT_ALT B      &kp SPACE              &kp DOWN              &ht_bh LEFT_ARROW N     &ht_bh DOWN_ARROW M     &ht_bh UP_ARROW COMMA    &ht_bh RIGHT_ARROW PERIOD  &ht_bh QUESTION SLASH           &mo 6
                                              &alt_gui             &ht_mo1_ltog3 1 2     &lt 2 SPACE                                                          &lt 2 BACKSPACE         &lt 3 ENTER             &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        number_layer {
            display-name = "NUMBER";
            bindings = <
&td_grave_  &td_1  &td_2  &td_3   &td_f11_minus  &td_f12_equal                                &mmv MOVE_UP                     &kp N6           &kp N7           &kp N8           &kp N9           &kp N0    &kp BSPC
&trans      &td_4  &td_5  &td_6   &kp LC(MINUS)  &kp LC(PLUS)                 &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &kp HOME  &kp PG_UP
&trans      &td_7  &td_8  &td_9   &td_0          &dotcom_bh     &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp END   &kp PG_DN
                          &trans  &trans         &trans                                                                        &kp INS          &kp DEL          &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mo_mouse_layer {
            display-name = "Fn";
            bindings = <
&kp LC(LS(TAB))  &kp UP_ARROW    &kp LC(TAB)      &td_mb_src      &mmv MOVE_UP    &td_down_up                             &kp UP                &td_mb_src      &mmv MOVE_UP    &td_down_up      &kp LS(LC(TAB))  &kp UP_ARROW    &kp LC(TAB)
&kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT               &kp LEFT  &kp ENTER  &kp RIGHT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW
&kp LCTRL        &kp LEFT_SHIFT  &kp PAGE_UP      &kp PAGE_DOWN   &msc SCRL_UP    &msc SCRL_DOWN   &kp SPACE              &kp DOWN              &msc SCRL_UP    &msc SCRL_DOWN  &kp PG_UP        &kp PAGE_DOWN    &kp LEFT_SHIFT  &kp LCTRL
                                                  &kp LGUI        &trans          &lt 2 SPACE                                                   &lt 2 ENTER     &trans          &kp RALT
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        GO_MOUSE {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp EXCL      &kp AT        &kp HASH   &kp DLLR   &kp PRCNT                            &mmv MOVE_UP                     &kp LA(LC(F1))  &kp LA(LC(F2))  &kp LA(LC(F3))  &td_bracket  &td_brace  &kp BSPC
&trans  &bt BT_CLR    &mkp LCLK     &mkp MCLK  &mkp RCLK  &mkp MB4             &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LA(LC(F4))  &kp LA(LC(F5))  &kp LA(LC(F6))  &td_paren    &kp BSLH   &kp GRAVE
&trans  &out OUT_USB  &out OUT_BLE  &none      &none      &mkp MB5   &trans                    &mmv MOVE_DOWN                   &kp LA(LC(F7))  &kp LA(LC(F8))  &kp LA(LC(F9))  &kp RBRC     &kp PIPE   &kp TILDE
                                    &trans     &trans     &kp SPACE                                                             &kp RET         &trans          &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        right_mouse_layer {
            display-name = "right_mouse_layer_";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                         &kp UP                &td_mb_src      &mmv MOVE_UP    &td_down_up      &kp LS(LC(TAB))  &kp UP_ARROW    &kp LC(TAB)
&trans  &trans  &trans  &trans  &trans  &trans               &kp LEFT  &kp ENTER  &kp RIGHT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW
&trans  &trans  &trans  &trans  &trans  &trans  &kp SPACE              &kp DOWN              &msc SCRL_UP    &msc SCRL_DOWN  &kp PG_UP        &kp PAGE_DOWN    &kp LEFT_SHIFT  &kp LCTRL
                        &trans  &trans  &trans                                               &lt 2 ENTER     &trans          &kp RALT
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        left_mouse_layer {
            display-name = "left_mouse_layer_";
            bindings = <
&kp LC(LS(TAB))  &kp UP_ARROW    &kp LC(TAB)      &td_mb_src      &mmv MOVE_UP    &td_down_up                             &kp UP                &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT               &kp LEFT  &kp ENTER  &kp RIGHT  &trans  &trans  &trans  &trans  &trans  &trans
&kp LCTRL        &kp LEFT_SHIFT  &kp PAGE_UP      &kp PAGE_DOWN   &msc SCRL_UP    &msc SCRL_DOWN   &kp SPACE              &kp DOWN              &trans  &trans  &trans  &trans  &trans  &trans
                                                  &kp LGUI        &trans          &lt 2 SPACE                                                   &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        funtion_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &kp LC(LS(ESC))     &kp LG(UP_ARROW)    &kp LG(LS(S))        &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_MUTE
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &kp LG(LEFT_ARROW)  &kp LG(DOWN_ARROW)  &kp LG(RIGHT_ARROW)  &kp C_PREV    &kp C_NEXT       &kp C_PLAY_PAUSE
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &bt BT_CLR_ALL      &bt BT_SEL 0        &bt BT_SEL 1         &bt BT_SEL 2  &bt BT_SEL 3     &trans
                        &trans  &trans  &trans                                    &soft_off           &trans              &kp C_SLEEP
            >;
        };
    };
};
