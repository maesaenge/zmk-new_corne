#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 50    // 10

// 'display-name'을 다시 'label'로 되돌려 치명적인 빌드 오류를 해결했습니다.
// 'deprecated' 경고는 다시 나타나지만, 빌드 성공에는 영향을 주지 않습니다.
#define TD_KEYS(name, term_ms, ...) \
    name: behavior_##name { \
        compatible = "zmk,behavior-tap-dance"; \
        label = #name; \
        #binding-cells = <0>; \
        tapping-term-ms = <term_ms>; \
        bindings = __VA_ARGS__; \
    };

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };
&msc_input_listener { input-processors = <&zip_scroll_scaler 4 1>; };

&msc {
    acceleration-exponent = <3>;
    time-to-max-speed-ms = <300>;
    delay-ms = <0>;
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    macros {
        macro_pp: macro_pp { compatible = "zmk,behavior-macro"; label = "MACRO_PP"; #binding-cells = <0>; bindings = <&kp LS(Q)>; };
        macro_jj: macro_jj { compatible = "zmk,behavior-macro"; label = "MACRO_JJ"; #binding-cells = <0>; bindings = <&kp LS(W)>; };
        macro_tt: macro_tt { compatible = "zmk,behavior-macro"; label = "MACRO_TT"; #binding-cells = <0>; bindings = <&kp LS(E)>; };
        macro_kk: macro_kk { compatible = "zmk,behavior-macro"; label = "MACRO_KK"; #binding-cells = <0>; bindings = <&kp LS(R)>; };
        macro_ss: macro_ss { compatible = "zmk,behavior-macro"; label = "MACRO_SS"; #binding-cells = <0>; bindings = <&kp LS(T)>; };

        macro_ya:  macro_ya  { compatible = "zmk,behavior-macro"; label = "MACRO_YA";  #binding-cells = <0>; bindings = <&kp K &kp I>; };
        macro_yeo: macro_yeo { compatible = "zmk,behavior-macro"; label = "MACRO_YEO"; #binding-cells = <0>; bindings = <&kp J &kp U>; };
        macro_yo:  macro_yo  { compatible = "zmk,behavior-macro"; label = "MACRO_YO";  #binding-cells = <0>; bindings = <&kp H &kp Y>; };
        macro_yu:  macro_yu  { compatible = "zmk,behavior-macro"; label = "MACRO_YU";  #binding-cells = <0>; bindings = <&kp M &kp P>; };
        macro_yae: macro_yae { compatible = "zmk,behavior-macro"; label = "MACRO_YAE"; #binding-cells = <0>; bindings = <&kp O &kp I>; };
        macro_ye:  macro_ye  { compatible = "zmk,behavior-macro"; label = "MACRO_YE";  #binding-cells = <0>; bindings = <&kp P &kp I>; };
    };

    behaviors {
        TD_KEYS(td_down_up, 450, <&kp PG_DN>, <&kp PG_UP>, <&kp HOME>, <&kp END>)
        TD_KEYS(td_mb_src, 450, <&mkp MB1>, <&mkp MB2>, <&msc SCRL_DOWN>, <&msc SCRL_UP>)
        TD_KEYS(td_bracket, 250, <&kp LBKT>, <&kp RBKT>)
        TD_KEYS(td_brace, 250, <&kp LBRC>, <&kp RBRC>)
        TD_KEYS(td_paren, 250, <&kp LPAR>, <&kp RPAR>)
        TD_KEYS(td_1, 250, <&kp N1>, <&kp EXCL>,  <&kp F1>)
        TD_KEYS(td_2, 250, <&kp N2>, <&kp AT>,    <&kp F2>)
        TD_KEYS(td_3, 250, <&kp N3>, <&kp HASH>,  <&kp F3>)
        TD_KEYS(td_4, 250, <&kp N4>, <&kp DLLR>,  <&kp F4>)
        TD_KEYS(td_5, 250, <&kp N5>, <&kp PRCNT>, <&kp F5>)
        TD_KEYS(td_6, 250, <&kp N6>, <&kp CARET>, <&kp F6>)
        TD_KEYS(td_7, 250, <&kp N7>, <&kp AMPS>,  <&kp F7>)
        TD_KEYS(td_8, 250, <&kp N8>, <&kp ASTRK>, <&kp F8>)
        TD_KEYS(td_9, 250, <&kp N9>, <&kp LPAR>,  <&kp F9>)
        TD_KEYS(td_0, 250, <&kp N0>, <&kp RPAR>,  <&kp F10>)

        TD_KEYS(td_p_pp,   180, <&kp Q>, <&macro_pp>)
        TD_KEYS(td_j_jj,   180, <&kp W>, <&macro_jj>)
        TD_KEYS(td_t_tt,   180, <&kp E>, <&macro_tt>)
        TD_KEYS(td_k_kk,   180, <&kp R>, <&macro_kk>)
        TD_KEYS(td_s_ss,   180, <&kp T>, <&macro_ss>)
        TD_KEYS(td_a_ya,   180, <&kp K>, <&macro_ya>)
        TD_KEYS(td_eo_yeo, 180, <&kp J>, <&macro_yeo>)
        TD_KEYS(td_o_yo,   180, <&kp H>, <&macro_yo>)
        TD_KEYS(td_u_yu,   180, <&kp M>, <&macro_yu>)
        TD_KEYS(td_ae_yae, 180, <&kp O>, <&macro_yae>)
        TD_KEYS(td_e_ye,   180, <&kp P>, <&macro_ye>)

        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            label = "Shift/Caps Lock Tap Dance"; // 일반 behavior에서는 display-name보다 label이 안정적일 수 있습니다.
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";
        softoff {
            bindings = <&soft_off>;
            key-positions = <1 15 29>;
        };
        combo_x {
            timeout-ms = <80>;
            bindings = <&kp LC(X)>;
            key-positions = <29 30>;
            layers = <0>;
        };
        combo_c {
            timeout-ms = <80>;
            bindings = <&kp LC(C)>;
            key-positions = <30 31>;
            layers = <0>;
        };
        combo_paste {
            timeout-ms = <80>;
            bindings = <&kp LC(V)>;
            key-positions = <31 32>;
            layers = <0>;
        };
        enter_fg {
            bindings = <&kp ENTER>;
            key-positions = <17 18>;
        };
        space_hj {
            bindings = <&kp SPACE>;
            key-positions = <22 23>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
&kp TAB  &td_p_pp  &td_j_jj  &td_t_tt  &td_k_kk  &td_s_ss                       &kp UP             &kp Y       &kp U       &kp I       &td_ae_yae  &td_e_ye    &kp ESC
&td0     &kp A     &kp S     &kp D     &kp F     &kp G          &kp LEFT &kp ENTER &kp RIGHT &td_o_yo    &td_eo_yeo  &td_a_ya    &kp L       &kp SEMI    &kp SQT
&kp LCTRL &kp Z    &kp X     &kp C     &kp V     &kp B   &kp SPACE                &kp DOWN           &kp N       &td_u_yu    &kp COMMA   &kp DOT     &kp FSLH    &kp ENTER
                           &kp LGUI  &mo 1     &lt 3 SPACE                      &lt 3 BACKSPACE  &mo 2       &kp RALT
            >;
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            bindings = <
&trans  &td_1   &td_2   &td_3   &td_0   &kp F11                         &mmv MOVE_UP                                &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &kp BSPC
&trans  &td_4   &td_5   &td_6   &kp F12 &bt BT_SEL 3      &mmv MOVE_LEFT &mkp LCLK     &mmv MOVE_RIGHT &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &kp HOME    &kp PG_UP
&trans  &td_7   &td_8   &td_9   &trans  &bt BT_CLR_ALL &kp C_MUTE       &mmv MOVE_DOWN                              &rgb_ug RGB_EFR &rgb_ug RGB_SPI &rgb_ug RGB_BRI &rgb_ug RGB_BRD &kp END     &kp PG_DN
                &trans  &trans  &trans                                                                              &kp INS     &kp DEL     &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            bindings = <
&trans  &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT                       &mmv MOVE_UP                                &kp CARET   &kp AMPS    &kp ASTRK   &td_bracket &td_brace   &kp BSPC
&trans  &bt BT_CLR &mkp LCLK  &mkp MCLK &mkp RCLK &mkp MB4       &mmv MOVE_LEFT &mkp LCLK     &mmv MOVE_RIGHT &kp MINUS   &kp EQUAL   &kp LBKT    &td_paren   &kp BSLH    &kp GRAVE
&trans  &out OUT_USB &out OUT_BLE &none   &none   &mkp MB5  &trans         &mmv MOVE_DOWN                              &kp UNDER   &kp PLUS    &kp LBRC    &kp RBRC    &kp PIPE    &kp TILDE
                                &trans  &trans  &kp SPACE                                                               &kp RET     &trans      &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans      &kp UP_ARROW    &trans          &td_mb_src      &mmv MOVE_UP   &td_down_up                      &kp UP             &td_mb_src      &mmv MOVE_UP   &td_down_up     &trans          &kp UP_ARROW    &kp ESC
&kp LEFT_ARROW &kp DOWN_ARROW &kp RIGHT_ARROW &mmv MOVE_LEFT   &mmv MOVE_DOWN &mmv MOVE_RIGHT     &kp LEFT &kp ENTER &kp RIGHT &mmv MOVE_LEFT   &mmv MOVE_DOWN &mmv MOVE_RIGHT   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW
&kp LCTRL   &kp Z           &kp PAGE_UP     &kp PAGE_DOWN   &msc SCRL_UP  &msc SCRL_DOWN &kp SPACE         &kp DOWN           &msc SCRL_UP    &msc SCRL_DOWN &kp PG_UP       &kp PAGE_DOWN   &kp FSLH        &kp ENTER
                                            &kp LGUI        &mo 1         &lt 3 SPACE                      &lt 3 ENTER      &mo 2           &kp RALT
            >;
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
