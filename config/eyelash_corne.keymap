#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#define TD_KEYS(name, term_ms, ...) \
    name: behavior_##name { \
        compatible = "zmk,behavior-tap-dance"; \
        label = #name; \
        #binding-cells = <0>; \
        tapping-term-ms = <term_ms>; \
        bindings = __VA_ARGS__; \
    };

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 4 1>; };

&msc {
    acceleration-exponent = <3>;    // 가속 곡선 (1=선형, 2=곡선, 3=더 강하게)
    time-to-max-speed-ms = <300>;   // 천천히 눌러도 0.3초에 최고 속도
    delay-ms = <0>;                 // 딜레이 없음
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    behaviors {
        TD_KEYS(td_down_up, 450, <&kp PG_DN>, <&kp PG_UP>, <&kp HOME>, <&kp END>)
        TD_KEYS(td_mb_src, 450, <&mkp MB1>, <&mkp MB2>, <&msc SCRL_DOWN>, <&msc SCRL_UP>)

        TD_KEYS(td_bracket, 150, <&kp LBKT>, <&kp RBKT>) // [ ]
        TD_KEYS(td_brace, 150, <&kp LBRC>, <&kp RBRC>) // { }
        TD_KEYS(td_paren, 150, <&kp LPAR>, <&kp RPAR>) // ( )

        TD_KEYS(td_1, 250, <&kp N1>, <&kp EXCL>,  <&kp F1>)
        TD_KEYS(td_2, 250, <&kp N2>, <&kp AT>,    <&kp F2>)
        TD_KEYS(td_3, 250, <&kp N3>, <&kp HASH>,  <&kp F3>)
        TD_KEYS(td_4, 250, <&kp N4>, <&kp DLLR>,  <&kp F4>)
        TD_KEYS(td_5, 250, <&kp N5>, <&kp PRCNT>, <&kp F5>)
        TD_KEYS(td_6, 250, <&kp N6>, <&kp CARET>, <&kp F6>)
        TD_KEYS(td_7, 250, <&kp N7>, <&kp AMPS>,  <&kp F7>)
        TD_KEYS(td_8, 250, <&kp N8>, <&kp ASTRK>, <&kp F8>)
        TD_KEYS(td_9, 250, <&kp N9>, <&kp LPAR>,  <&kp F9>)
        TD_KEYS(td_0, 250, <&kp N0>, <&kp RPAR>,  <&kp F10>)

        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        softoff {
            bindings = <&soft_off>;
            key-positions = <1 15 29>;
        };

        combo_x {
            bindings = <&kp K_CUT>;
            key-positions = <29 30>;
            slow-release;
            layers = <0>;
        };

        combo_c {
            bindings = <&kp K_COPY>;
            key-positions = <30 31>;
            slow-release;
            layers = <0>;
        };

        combo_paste {
            bindings = <&kp K_PASTE>;
            key-positions = <31 32>;
            slow-release;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T                               &kp UP                &kp Y            &kp U  &kp I      &kp O    &kp P     &kp ESC
&td0       &kp A  &kp S  &kp D     &kp F  &kp G                     &kp LEFT  &kp ENTER  &kp RIGHT  &kp H            &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LCTRL  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp SPACE              &kp DOWN              &kp N            &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ENTER
                         &kp LGUI  &mo 1  &lt 3 SPACE                                               &lt 3 BACKSPACE  &mo 2  &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&trans  &td_1  &td_2  &td_3   &td_0    &kp F11                                       &mmv MOVE_UP                     &kp N6           &kp N7           &kp N8           &kp N9           &kp N0    &kp BSPC
&trans  &td_4  &td_5  &td_6   &kp F12  &bt BT_SEL 3                  &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &kp HOME  &kp PG_UP
&trans  &td_7  &td_8  &td_9   &trans   &bt BT_CLR_ALL  &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp END   &kp PG_DN
                      &trans  &trans   &trans                                                                         &kp INS          &kp DEL          &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp EXCL      &kp AT        &kp HASH   &kp DLLR   &kp PRCNT                            &mmv MOVE_UP                     &kp CARET  &kp AMPS   &kp ASTRK  &td_bracket  &td_brace  &kp BSPC
&trans  &bt BT_CLR    &mkp LCLK     &mkp MCLK  &mkp RCLK  &mkp MB4             &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp LBKT   &td_paren  &kp BSLH  &kp GRAVE
&trans  &out OUT_USB  &out OUT_BLE  &none      &none      &mkp MB5   &trans                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                    &trans     &trans     &kp SPACE                                                             &kp RET    &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            display-name = "Fn";
            bindings = <
&trans          &kp UP_ARROW    &trans           &td_mb_src      &mmv MOVE_UP    &td_down_up                             &kp UP                &td_mb_src      &mmv MOVE_UP    &td_down_up      &trans          &kp UP_ARROW    &kp ESC
&kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT               &kp LEFT  &kp ENTER  &kp RIGHT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW
&kp LCTRL       &kp Z           &kp PAGE_UP      &kp PAGE_DOWN   &msc SCRL_UP    &msc SCRL_DOWN   &kp SPACE              &kp DOWN              &msc SCRL_UP    &msc SCRL_DOWN  &kp PG_UP        &kp PAGE_DOWN   &kp FSLH        &kp ENTER
                                                 &kp LGUI        &mo 1           &lt 3 SPACE                                                   &lt 3 ENTER     &mo 2           &kp RALT
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
